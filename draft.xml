<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-mfa-assoc-latest">
  <front>
    <title>OAuth 2.0 Multi-Factor Authenticator Association</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>This specification defines mechanisms for dynamically associating
        authenticators with resource owners.  Once associated, an authenticator
        can be used for strong authorization within OAuth 2.0.</t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>
        In order for an OAuth 2.0 authorization server to enforce strong
        authorization, it must associate resource owners with one or more
        authenticators capable of responding to a strong authorization
        challenge.  This specification describes how an authenticator can be
        dynamically associated with a resource owner to obtain this information.
      </t>
        
      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      
      <section title="Terminology">
        <t>
          This specification also defines the following terms:
          
          <list style="hanging"> 
          <t hangText="MFA Token:"><vspace blankLines="1"/>
            A short-lived token representing an authorization session.</t>
          </list> 
        </t>
      </section>
        
    </section>
    
    <section title="Authenticator Associate Endpoint">
      <t>
        The authenticator associate endpoint is an OAuth 2.0 endpoint defined in
        this document that is designed to allow an authenticator to be
        associated with a resource owner.  The authenticator associate endpoint
        MUST accept HTTP POST messages with request parameters encoded in the
        entity body using the "application/json" format.  The authenticator
        associate endpoint MUST be protected by a transport-layer security
        mechanism.
      </t>
      <t>
        The authenticator associate endpoint MUST be an OAuth 2.0 protected
        resource and it MUST accept access tokens as defined by <xref target='RFC6750'/>
        to limit association to only previously authorized parties.  The method
        by which the access token is obtained by the client is generally out of
        band; two such mechanisms are defined by this specification.  The method
        by which the access token is verified and validated by the authenticator
        associate endpoint is out of scope for this specification.
      </t>
        
      <section title='Authenticator Associate Request' anchor="assoc-req">
        <t>
          The client makes a request to the authenticator associate endpoint by
          sending the following parameters with a content type of
          <spanx style='verb'>application/json</spanx>:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='authenticator_types'>
              <vspace />
              OPTIONAL. Array of authenticator type strings that the client
              supports.  These authenticator types are defined as follows:
              
              <list style="symbols">
                <t><spanx style="verb">otp</spanx>: A device that generates
                one-time passwords.</t>
                
                <t><spanx style="verb">oob</spanx>: A device that communicates
                securely with the authorization server over a secondary
                channel.</t>

                <t><spanx style="verb">recovery-code</spanx>: A a physical or
                electronic set of secrets shared between the resource owner
                and the authorization server.</t>
              </list>
              
              Authorization servers MAY allow for other values as defined in
              the authenticator type extension process.
            </t>
            <t hangText='phone_number'>
              <vspace />
              OPTIONAL. For 'sms' and 'tel' oob challenges, the phone number 
              to send challenge via SMS or call to the resource owner.
            </t>
            <t hangText='email'>
              <vspace />
              OPTIONAL. For 'email' oob challenges, the address
              to send challenge via e-mail to the resource owner.
            </t>
            <t hangText='oob_channels'>
              <vspace />
              OPTIONAL. Array of out-of-band channel strings that the client
              supports.  These out-of-band channels are defined as follows:
              
              <list style="symbols">
                <t><spanx style="verb">sms</spanx>: SMS channel to the user at
                a registered number.</t>
                
                <t><spanx style="verb">tel</spanx>: Telephone call to the user
                at a registered number.</t>
                
                <t><spanx style="verb">email</spanx>: E-mail sent to the user
                at a registered address.</t>
                
                <t><spanx style="verb">auth0</spanx>: Push notification to
                Guardian app on user's mobile device.</t>
                
                <t><spanx style="verb">duo</spanx>: Push notification to Duo
                Mobile app on user's mobile device.</t>
              </list>
              
              Authorization servers MAY allow for other values as defined in
              the out-of-band channel extension process.  This parameter is
              used when the client indicates support for authenticator types
              including the value "oob".
            </t>
          </list>
        </t>
        <t>
          The access token MUST be sent as a Bearer Token, per section 2 of
          <xref target='RFC6750'/>.  It is RECOMMENDED that the access token be
          sent using the Authorization header field.
        </t>
        <figure>
          <preamble>
            For example, the client makes the following HTTPS request (line
            breaks are for display purposes only)::
          </preamble>
          <artwork><![CDATA[
POST /associate HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/json

{
"authenticator_types": [
  "otp", "oob"
]
}
]]></artwork>
        </figure>
      </section>
      
      <section title='Authenticator Associate Response' anchor="assoc-res">
        <t>
          Upon a successful authenticator associate request, the authorization
          server selects an authenticator type that the client is capable of
          supporting and returns parameters needing to be bound to the device in
          order to complete the assocation process.  The server responds with
          an HTTP 201 Created status code and a body of type "application/json"
          with the following content:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='authenticator_type'>
              <vspace />
              REQUIRED.  Authenticator type that was associated with the user's
              account.
            </t>
            <t hangText='oob_channel'>
              <vspace />
              OPTIONAL.  The out-of-band channel to use. The parameter
              MUST be included when the value of "authenticator_type" is
              "oob" and MUST NOT be included otherwise.
            </t>
            <t hangText='barcode_uri'>
              <vspace />
              OPTIONAL. URI to be rendered as a barcode which can be scanned
              by the authenticator to effect provisioning.
            </t>
            <t hangText='recovery_codes'>
              <vspace />
              OPTIONAL. An array of strings to be used as recovery codes to gain
              access in the event that an authenticator is lost or malfunctions.
              The parameter MUST be included when the value of "authenticator_type"
              is "recovery-code" and MAY be included otherwise.
            </t>
            <t hangText='oob_code'>
              <vspace />
              OPTIONAL.  Out-of-band transaction code as defined by section 3.2.1
              of OAuth 2.0 Multi-Factor Authorization.  The parameter SHOULD be
              included when the value of "authenticator_type" is "oob" and MUST
              NOT be included otherwise.  The value of this parameter MAY be
              used in an access token request as defined by section 3.2.3 of
              OAuth 2.0 Multi-Factor Authorization.
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="Authenticator Association List Endpoint">
      <t>
        The authenticator list endpoint is an OAuth 2.0 endpoint defined in
        this document that is designed to allow listing all the authenticators
        associated with a resource owner.  The authenticator list endpoint
        MUST accept HTTP GET messages.  The authenticator
        list endpoint MUST be protected by a transport-layer security
        mechanism.
      </t>
      <t>
        The authenticator associate endpoint MUST be an OAuth 2.0 protected
        resource and it MUST accept access tokens as defined by <xref target='RFC6750'/>
        to limit listing of authenticators to only previously authorized parties.  The method
        by which the access token is obtained by the client is generally out of
        band; one of such mechanisms is defined by this specification.  The method
        by which the access token is verified and validated by the authenticator
        associate endpoint is out of scope for this specification.
      </t>
        
      <section title='Authenticator Association List Request' anchor="list-req">
        <t>
          The client makes a request to the authenticator list endpoint
          including no parameters.
        </t>
        <t>
          The access token MUST be sent as a Bearer Token, per section 2 of
          <xref target='RFC6750'/>.  It is RECOMMENDED that the access token be
          sent using the Authorization header field.
        </t>
        <figure>
          <preamble>
            For example, the client makes the following HTTPS request (line
            breaks are for display purposes only)::
          </preamble>
          <artwork><![CDATA[
GET /associate HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
]]></artwork>
        </figure>
      </section>
      
      <section title='Authenticator Association List Response' anchor="list-res">
        <t>
          Upon a successful authenticator association list request, the authorization
          server responds with an HTTP 200 OK status code and a body of type "application/json"
          containing an array of all the authenticators associated with the resource
          owner each one of which will contain the following properties.
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='id'>
              <vspace />
              REQUIRED.  Authenticator id associated with the user's
              account.
              
              Id is RECCOMENDED to be a low entropy value with
              a high probability of collision for different 
              resource owners to prevent unauthorized leaking of 
              trackeable information.
            </t>
            <t hangText='authenticator_type'>
              <vspace />
              REQUIRED.  Authenticator type that is associated with the user's
              account.
            </t>
            <t hangText='oob_channel'>
              <vspace />
              OPTIONAL. Out-of-band channel that is used by the authenticator. 
              Required when `authenticator_type` is `oob`. 
            </t>
            <t hangText='name'>
              <vspace />
              OPTIONAL. A human-readable label to identify the authenticator
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="Authenticator Delete Endpoint">
      <t>
        The authenticator delete endpoint is an OAuth 2.0 endpoint defined in
        this document that is designed to allow a resource owner to be dissasociated
        with an authenticator.  The authenticator delete endpoint
        MUST accept HTTP DELETE messages.  The authenticator
        delete endpoint MUST be protected by a transport-layer security
        mechanism.
      </t>
      <t>
        The authenticator associate endpoint MUST be an OAuth 2.0 protected
        resource and it MUST accept access tokens as defined by <xref target='RFC6750'/>
        to limit deletion to only previously authorized parties.  The method
        by which the access token is obtained by the client is generally out of
        band; one of such mechanisms is defined by this specification.  The method
        by which the access token is verified and validated by the authenticator
        associate endpoint is out of scope for this specification.
      </t>
        
      <section title='Authenticator Delete Request' anchor="del-req">
        <t>
          The client makes a request to the authenticator delete endpoint by
          sending the following parameters
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='authenticator_id'>
              <vspace />
              OPTIONAL. Id of the authenticator that the user wants to delete.
              
              The authenticator_id is RECCOMENDED to be a low entropy value with
              a high probability of collision for different resource owners to prevent
              unauthorized leaking of trackeable information.
            </t>
          </list>
        </t>
        <t>
          The access token MUST be sent as a Bearer Token, per section 2 of
          <xref target='RFC6750'/>.  It is RECOMMENDED that the access token be
          sent using the Authorization header field.
        </t>
        <figure>
          <preamble>
            For example, the client makes the following HTTPS request (line
            breaks are for display purposes only)::
          </preamble>
          <artwork><![CDATA[
DELETE /associate/1234 HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
]]></artwork>
        </figure>
      </section>
      
      <section title='Authenticator Delete Response' anchor="del-res">
        <t>
          Upon a successful authenticator delete request, the authorization
          server responds with an HTTP 204 No Content status code and
          an empty body.
        </t>
      </section>
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include="reference.RFC.6750"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
